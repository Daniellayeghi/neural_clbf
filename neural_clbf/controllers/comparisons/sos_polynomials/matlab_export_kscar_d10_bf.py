def kscar_d10_polynomial_clbf(x):
    # Barf: degree-10 SOS CLBF
    V = (
        (1.6731) * x[:, 0] ** 2
        + (-0.32563) * x[:, 0] ** 3
        + (1.0295) * x[:, 0] ** 4
        + (-0.93618) * x[:, 0] ** 5
        + (5.3214) * x[:, 0] ** 6
        + (0.052531) * x[:, 0] ** 7
        + (-0.33326) * x[:, 0] ** 8
        + (-0.00080636) * x[:, 0] ** 9
        + (0.0058499) * x[:, 0] ** 10
        + (0.55492) * x[:, 2] ** 2
        + (-0.067116) * x[:, 2] ** 3
        + (0.91323) * x[:, 2] ** 4
        + (-0.0090608) * x[:, 2] ** 5
        + (0.066627) * x[:, 2] ** 6
        + (0.00039932) * x[:, 2] ** 7
        + (0.00049954) * x[:, 2] ** 8
        + (0.56745) * x[:, 2] * x[:, 0]
        + (-0.32485) * x[:, 2] * x[:, 0] ** 2
        + (0.46896) * x[:, 2] * x[:, 0] ** 3
        + (-0.33875) * x[:, 2] * x[:, 0] ** 4
        + (0.95225) * x[:, 2] * x[:, 0] ** 5
        + (0.010862) * x[:, 2] * x[:, 0] ** 6
        + (0.0012662) * x[:, 2] * x[:, 0] ** 7
        + (0.00020097) * x[:, 2] * x[:, 0] ** 8
        + (-0.0020058) * x[:, 2] * x[:, 0] ** 9
        + (-0.36771) * x[:, 2] ** 2 * x[:, 0]
        + (0.7664) * x[:, 2] ** 2 * x[:, 0] ** 2
        + (-0.097314) * x[:, 2] ** 2 * x[:, 0] ** 3
        + (0.49295) * x[:, 2] ** 2 * x[:, 0] ** 4
        + (0.018818) * x[:, 2] ** 2 * x[:, 0] ** 5
        + (-0.063826) * x[:, 2] ** 2 * x[:, 0] ** 6
        + (-0.00079333) * x[:, 2] ** 2 * x[:, 0] ** 7
        + (0.0027058) * x[:, 2] ** 2 * x[:, 0] ** 8
        + (0.02804) * x[:, 2] ** 3 * x[:, 0]
        + (0.1082) * x[:, 2] ** 3 * x[:, 0] ** 2
        + (-0.62643) * x[:, 2] ** 3 * x[:, 0] ** 3
        + (-0.0098732) * x[:, 2] ** 3 * x[:, 0] ** 4
        + (0.050649) * x[:, 2] ** 3 * x[:, 0] ** 5
        + (0.00046285) * x[:, 2] ** 3 * x[:, 0] ** 6
        + (-0.0018219) * x[:, 2] ** 3 * x[:, 0] ** 7
        + (0.0022811) * x[:, 2] ** 4 * x[:, 0]
        + (-0.080549) * x[:, 2] ** 4 * x[:, 0] ** 2
        + (0.004127) * x[:, 2] ** 4 * x[:, 0] ** 3
        + (-0.010395) * x[:, 2] ** 4 * x[:, 0] ** 4
        + (-0.00027124) * x[:, 2] ** 4 * x[:, 0] ** 5
        + (0.00080812) * x[:, 2] ** 4 * x[:, 0] ** 6
        + (0.16189) * x[:, 2] ** 5 * x[:, 0]
        + (-0.0027617) * x[:, 2] ** 5 * x[:, 0] ** 2
        + (0.0077122) * x[:, 2] ** 5 * x[:, 0] ** 3
        + (0.00018066) * x[:, 2] ** 5 * x[:, 0] ** 4
        + (-0.0007408) * x[:, 2] ** 5 * x[:, 0] ** 5
        + (-0.00043627) * x[:, 2] ** 6 * x[:, 0]
        + (-0.0078574) * x[:, 2] ** 6 * x[:, 0] ** 2
        + (-2.8064e-05) * x[:, 2] ** 6 * x[:, 0] ** 3
        + (0.00048107) * x[:, 2] ** 6 * x[:, 0] ** 4
        + (0.00011409) * x[:, 2] ** 7 * x[:, 0]
        + (-6.5418e-06) * x[:, 2] ** 7 * x[:, 0] ** 2
        + (-0.00013131) * x[:, 2] ** 7 * x[:, 0] ** 3
        + (1.4265e-05) * x[:, 2] ** 8 * x[:, 0] ** 2
    )

    return V
